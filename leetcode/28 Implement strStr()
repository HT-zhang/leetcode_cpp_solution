题目描述：
给定两个字符串，找出子字符串在首字符串中首次出现的位置，若没有出现，返回-1

#解法1
内置函数：

int strstr(string haystack, string needle)
{
    return haystack.indexOf(needle);
}

#解法2 ：
双指针搜索：
int strstr(string haystack, string needle)
{
	int m = haystack.size(), n = needle.size();
    for(int i = 0; i<= m-n; i++)
    {
        int j = 0
        for( ; j<n; j++)
        {
            if(haystack[i+j] != needle[j])
                break;
        }
        if(j == n)
            return i;
    }
    return -1;
}

#解法3：
KMP解法：
vector<int> kmp(string needle)
{
    int n = needle.size();
    vector<int> lps(n,0);
    for(int i = 1, len = 0; i<n;)
    {
        if (needle[i] == needle[len])
        {
            needle[i++] = ++ len;
        }
        else if(len)
        {
            len = lps[len-1];
        }
        else
        {
            lps[i++] = 0;
        }
    }
    return lps;
}

int strstr(string haystack, string needle)
{
    int m = haystack.size(), n = needle.size();
    vector<int>lps = kmp(needle);
    if(! n )
    {
        return 0;
    }
    for(int i = 0, j = 0; i<m)
    {
		if (haystack[i] == needle[j])
        {
            i++, j++;
        }
        if(j == n)
        {
            return i-j;
        }
        if(i<m && haystack[i] != needle[j])
        {
            j? j = lps[j-1]; i++
        }
    }
    return -1;
}
